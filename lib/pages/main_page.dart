import 'package:app_dtn/pages/eventpages/academic_events.dart';
import 'package:app_dtn/pages/eventpages/traditional_events.dart';
import 'package:app_dtn/pages/eventpages/union_events.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:app_dtn/providers/event_provider.dart';

class MainPage extends StatefulWidget {
  const MainPage({super.key});

  @override
  State<MainPage> createState() => _MainPageState();
}

class _MainPageState extends State<MainPage> {
  bool _isInitialized = false;

  @override
  void initState() {
    super.initState();
    // Kh√¥ng g·ªçi fetchMyEvents tr·ª±c ti·∫øp trong initState
    // Thay v√†o ƒë√≥, s·ª≠ d·ª•ng addPostFrameCallback ƒë·ªÉ ƒë·∫£m b·∫£o
    // vi·ªác g·ªçi di·ªÖn ra sau khi build frame ƒë·∫ßu ti√™n
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (!_isInitialized && mounted) {
        _isInitialized = true;
        _fetchMyEvents();
      }
    });
  }

  // H√†m ƒë·ªÉ l·∫•y danh s√°ch s·ª± ki·ªán c·ªßa ng∆∞·ªùi d√πng t·ª´ provider
  Future<void> _fetchMyEvents() async {
    if (!mounted) return;

    debugPrint('üì± MainPage: ƒêang t·∫£i s·ª± ki·ªán c·ªßa NG∆Ø·ªúI D√ôNG...');
    try {
      final eventProvider = Provider.of<EventProvider>(context, listen: false);

      // Reset l·ªói tr∆∞·ªõc khi fetch
      eventProvider.resetError();

      await eventProvider.fetchMyEvents(refresh: true);

      if (mounted) {
        // Ki·ªÉm tra l·ªói sau khi t·∫£i
        if (eventProvider.error != null) {
          debugPrint('‚ùå MainPage: L·ªói khi t·∫£i s·ª± ki·ªán: ${eventProvider.error}');
        } else {
          debugPrint('‚úÖ MainPage: T·∫£i s·ª± ki·ªán c·ªßa ng∆∞·ªùi d√πng th√†nh c√¥ng');
        }
      }
    } catch (e) {
      debugPrint('‚ùå MainPage: L·ªói ngo·∫°i l·ªá khi t·∫£i s·ª± ki·ªán c·ªßa ng∆∞·ªùi d√πng: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return DefaultTabController(
      length: 3, // S·ªë l∆∞·ª£ng tab
      child: Scaffold(
        backgroundColor: Colors.white,
        appBar: AppBar(
          backgroundColor: Colors.white,
          centerTitle: true,
          automaticallyImplyLeading: false,
          title: Text(
            "HO·∫†T ƒê·ªòNG C·ª¶A B·∫†N",
            style: TextStyle(
              color: Colors.blue[900],
              fontWeight: FontWeight.bold,
            ),
          ),
          actions: [
            // N√∫t l√†m m·ªõi danh s√°ch
            IconButton(
              icon: Icon(Icons.refresh, color: Colors.blue[900]),
              onPressed: () {
                debugPrint('üîÑ MainPage: ƒêang l√†m m·ªõi danh s√°ch s·ª± ki·ªán...');
                _fetchMyEvents();
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                    content: Text('ƒêang l√†m m·ªõi danh s√°ch s·ª± ki·ªán'),
                  ),
                );
              },
            ),
          ],
          bottom: TabBar(
            indicatorColor: Colors.blue[900],
            labelColor: Colors.blue[900],
            unselectedLabelColor: Colors.grey,
            tabs: [
              Tab(text: "Truy·ªÅn Th·ªëng"),
              Tab(text: "H·ªçc Thu·∫≠t"),
              Tab(text: "Li√™n Chi ƒêo√†n"),
            ],
          ),
        ),
        body: Consumer<EventProvider>(
          builder: (context, eventProvider, child) {
            // Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu ƒëang t·∫£i
            if (eventProvider.isLoading && eventProvider.myEvents.isEmpty) {
              return const Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    CircularProgressIndicator(),
                    SizedBox(height: 16),
                    Text('ƒêang t·∫£i danh s√°ch s·ª± ki·ªán...'),
                  ],
                ),
              );
            }

            // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói n·∫øu c√≥
            if (eventProvider.error != null && eventProvider.myEvents.isEmpty) {
              return Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Icon(Icons.error_outline, size: 60, color: Colors.red),
                    SizedBox(height: 16),
                    Text(
                      'ƒê√£ x·∫£y ra l·ªói: ${eventProvider.error}',
                      textAlign: TextAlign.center,
                    ),
                    SizedBox(height: 16),
                    ElevatedButton(
                      onPressed: _fetchMyEvents,
                      child: Text('Th·ª≠ l·∫°i'),
                    ),
                  ],
                ),
              );
            }

            // Hi·ªÉn th·ªã TabBarView v·ªõi d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫£i
            return TabBarView(
              children: [TraditionalEvents(), AcademicEvents(), UnionEvents()],
            );
          },
        ),
      ),
    );
  }
}
