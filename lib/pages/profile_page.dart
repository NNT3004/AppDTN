import 'package:flutter/material.dart';

import 'package:provider/provider.dart';
import 'package:app_dtn/providers/auth_provider.dart';



class ProfilePage extends StatefulWidget {
  const ProfilePage({super.key});

  @override
  State<ProfilePage> createState() => _ProfilePageState();
}

class _ProfilePageState extends State<ProfilePage>
    with AutomaticKeepAliveClientMixin {
  final _formKey = GlobalKey<FormState>();
  bool _isLoading = false;
  bool _hasInitialized = false;
  int _buildCount = 0;

  @override
  bool get wantKeepAlive => true;

  @override
  void initState() {
    super.initState();
    debugPrint('üîµ INIT: ProfilePage ƒë∆∞·ª£c kh·ªüi t·∫°o');

    // S·ª≠ d·ª•ng addPostFrameCallback ƒë·ªÉ ƒë·∫£m b·∫£o g·ªçi fetch sau khi build ho√†n t·∫•t
    WidgetsBinding.instance.addPostFrameCallback((_) {
      debugPrint('‚è±Ô∏è POST_FRAME: ProfilePage s·∫µn s√†ng kh·ªüi t·∫°o d·ªØ li·ªáu');
      _initializeProfilePage();
    });
  }

  @override
  void dispose() {
    debugPrint('üîµ DISPOSE: ProfilePage b·ªã h·ªßy');
    super.dispose();
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    debugPrint('üîµ DEPENDENCIES: ProfilePage dependencies thay ƒë·ªïi');
  }

  @override
  void activate() {
    super.activate();
    debugPrint('üîµ ACTIVATE: ProfilePage ƒë∆∞·ª£c k√≠ch ho·∫°t');
  }

  @override
  void deactivate() {
    debugPrint('üîµ DEACTIVATE: ProfilePage b·ªã v√¥ hi·ªáu h√≥a');
    super.deactivate();
  }

  Future<void> _initializeProfilePage() async {
    debugPrint(
      'üîµ INITIALIZE: B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o ProfilePage, hasInitialized = $_hasInitialized',
    );
    if (_hasInitialized) {
      debugPrint(
        '‚ö†Ô∏è INITIALIZE: ProfilePage ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o tr∆∞·ªõc ƒë√≥, b·ªè qua',
      );
      return;
    }

    try {
      final authProvider = Provider.of<AuthProvider>(context, listen: false);
      debugPrint(
        'üîµ PROVIDER: L·∫•y AuthProvider, isInitialized = ${authProvider.isInitialized}',
      );

      // ƒê·ª£i cho AuthProvider kh·ªüi t·∫°o xong v·ªõi s·ªë l·∫ßn th·ª≠ gi·ªõi h·∫°n
      int retryCount = 0;
      while (!authProvider.isInitialized && retryCount < 5) {
        debugPrint(
          '‚è≥ WAIT: ƒêang ƒë·ª£i AuthProvider kh·ªüi t·∫°o... (l·∫ßn $retryCount)',
        );
        await Future.delayed(Duration(milliseconds: 200));
        retryCount++;
        if (!mounted) {
          debugPrint(
            '‚ö†Ô∏è NOT_MOUNTED: ProfilePage kh√¥ng c√≤n mounted khi ƒë·ª£i AuthProvider',
          );
          return;
        }
      }

      if (!authProvider.isInitialized) {
        debugPrint('‚ö†Ô∏è TIMEOUT: AuthProvider kh√¥ng kh·ªüi t·∫°o sau nhi·ªÅu l·∫ßn th·ª≠');
        _hasInitialized = true;
        return;
      }

      debugPrint(
        'üîç AUTH_STATE: AuthProvider ƒë√£ kh·ªüi t·∫°o. ƒêƒÉng nh·∫≠p = ${authProvider.isAuthenticated}',
      );

      if (authProvider.isAuthenticated) {
        debugPrint('‚úÖ AUTH_OK: Ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p. ƒêang t·∫£i th√¥ng tin...');
        await _fetchUserProfile();
      } else {
        debugPrint('‚ö†Ô∏è AUTH_NO: Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p.');
      }
    } catch (e) {
      debugPrint('‚ùå INIT_ERROR: L·ªói khi kh·ªüi t·∫°o ProfilePage: $e');
    } finally {
      _hasInitialized = true;
      debugPrint('‚úÖ INIT_DONE: ProfilePage ƒë√£ ho√†n t·∫•t kh·ªüi t·∫°o');
    }
  }

  Future<void> _fetchUserProfile() async {
    debugPrint('üîÑ Starting to fetch user profile in ProfilePage');

    // Ki·ªÉm tra mounted tr∆∞·ªõc khi c·∫≠p nh·∫≠t state
    if (!mounted) return;

    setState(() {
      _isLoading = true;
    });

    try {
      final authProvider = Provider.of<AuthProvider>(context, listen: false);
      // S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c m·ªõi kh√¥ng l√†m thay ƒë·ªïi isLoading chung
      final result = await authProvider.fetchUserProfile();

      debugPrint('‚úÖ Fetch user profile completed with result: $result');

      // Ki·ªÉm tra mounted l·∫ßn n·ªØa
      if (!mounted) return;

      setState(() {
        _isLoading = false;
      });
    } catch (e) {
      if (!mounted) return;
      debugPrint('‚ùå L·ªói khi t·∫£i th√¥ng tin ng∆∞·ªùi d√πng: $e');
      setState(() {
        _isLoading = false;
      });
    }
  }

  bool isEditing = false; // Tr·∫°ng th√°i ch·ªânh s·ª≠a

  @override
  Widget build(BuildContext context) {
    super.build(context); // Quan tr·ªçng cho AutomaticKeepAliveClientMixin
    _buildCount++;
    debugPrint('üèóÔ∏è BUILD: ProfilePage ƒë∆∞·ª£c x√¢y d·ª±ng l·∫ßn th·ª© $_buildCount');
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        backgroundColor: Colors.white,
        centerTitle: true,
        title: Text(
          "Th√¥ng Tin C√° Nh√¢n",
          style: TextStyle(
            color: Colors.blue[900],
            fontWeight: FontWeight.bold,
          ),
        ),
        actions: [

          // N√∫t ch·ªânh s·ª≠a
          IconButton(
            icon: Icon(Icons.edit, color: Colors.blue[900]),
            onPressed: () {
              setState(() {
                isEditing = !isEditing;
              });
            },
          ),
        ],
      ),
      body: SingleChildScrollView(
        padding: EdgeInsets.all(20),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              // ·∫¢nh ƒë·∫°i di·ªán
              Center(
                child: CircleAvatar(
                  radius: 50,
                  backgroundImage: AssetImage('lib/images/thinh.png'), // Avatar
                ),
              ),
              SizedBox(height: 20),

              // C√°c tr∆∞·ªùng th√¥ng tin
              _buildTextField("T√™n ƒë·∫ßy ƒë·ªß", "fullname"),
              _buildTextField("MSSV", "studentId"),
              _buildTextField("Email", "email"),
              _buildTextField("S·ªë ƒëi·ªán tho·∫°i", "phoneNumber"),
              _buildTextField("ƒê·ªãa ch·ªâ", "address"),
              SizedBox(height: 20),

              // N√∫t l∆∞u khi ƒëang ch·ªânh s·ª≠a
              if (isEditing)
                ElevatedButton(
                  onPressed: () {
                    if (_formKey.currentState!.validate()) {
                      _formKey.currentState!.save(); // L∆∞u d·ªØ li·ªáu v√†o user
                      setState(() {
                        isEditing = false;
                      });
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(content: Text("Th√¥ng tin ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!")),
                      );
                    }
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.blue[900],
                    padding: EdgeInsets.symmetric(horizontal: 30, vertical: 12),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(10),
                    ),
                  ),
                  child: Text("L∆∞u", style: TextStyle(fontSize: 16, color: Colors.white)),
                ),
            ],
          ),
        ),
      ),
    );
  }

  // H√†m t·∫°o TextField c√≥ th·ªÉ ch·ªânh s·ª≠a
  Widget _buildTextField(String label, String key) {
    return Padding(
      padding: EdgeInsets.only(bottom: 15),
      child: TextFormField(
        initialValue: user[key],
        readOnly: !isEditing, // Ch·ªâ cho ph√©p ch·ªânh s·ª≠a khi b·∫≠t ch·∫ø ƒë·ªô edit
        onChanged: (value) {
          user[key] = value; // C·∫≠p nh·∫≠t gi√° tr·ªã m·ªõi v√†o user
        },
        decoration: InputDecoration(
          labelText: label,
          border: OutlineInputBorder(),
          filled: true,
          fillColor: isEditing ? Colors.white : Colors.grey[300], // Ch·ªâ ƒë·ªïi m√†u khi ch·ªânh s·ª≠a
        ),
      ),
    );
  }
}
