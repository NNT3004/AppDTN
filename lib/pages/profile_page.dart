import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:app_dtn/providers/auth_provider.dart';

class ProfilePage extends StatefulWidget {
  const ProfilePage({super.key});

  @override
  State<ProfilePage> createState() => _ProfilePageState();
}

class _ProfilePageState extends State<ProfilePage>
    with AutomaticKeepAliveClientMixin {
  final _formKey = GlobalKey<FormState>();
  bool _isLoading = false;
  bool _hasInitialized = false;
  int _buildCount = 0;

  @override
  bool get wantKeepAlive => true;

  @override
  void initState() {
    super.initState();
    debugPrint('üîµ INIT: ProfilePage ƒë∆∞·ª£c kh·ªüi t·∫°o');

    // S·ª≠ d·ª•ng addPostFrameCallback ƒë·ªÉ ƒë·∫£m b·∫£o g·ªçi fetch sau khi build ho√†n t·∫•t
    WidgetsBinding.instance.addPostFrameCallback((_) {
      debugPrint('‚è±Ô∏è POST_FRAME: ProfilePage s·∫µn s√†ng kh·ªüi t·∫°o d·ªØ li·ªáu');
      _initializeProfilePage();
    });
  }

  @override
  void dispose() {
    debugPrint('üîµ DISPOSE: ProfilePage b·ªã h·ªßy');
    super.dispose();
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    debugPrint('üîµ DEPENDENCIES: ProfilePage dependencies thay ƒë·ªïi');
  }

  @override
  void activate() {
    super.activate();
    debugPrint('üîµ ACTIVATE: ProfilePage ƒë∆∞·ª£c k√≠ch ho·∫°t');
  }

  @override
  void deactivate() {
    debugPrint('üîµ DEACTIVATE: ProfilePage b·ªã v√¥ hi·ªáu h√≥a');
    super.deactivate();
  }

  Future<void> _initializeProfilePage() async {
    debugPrint(
      'üîµ INITIALIZE: B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o ProfilePage, hasInitialized = $_hasInitialized',
    );
    if (_hasInitialized) {
      debugPrint(
        '‚ö†Ô∏è INITIALIZE: ProfilePage ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o tr∆∞·ªõc ƒë√≥, b·ªè qua',
      );
      return;
    }

    try {
      final authProvider = Provider.of<AuthProvider>(context, listen: false);
      debugPrint(
        'üîµ PROVIDER: L·∫•y AuthProvider, isInitialized = ${authProvider.isInitialized}',
      );

      // ƒê·ª£i cho AuthProvider kh·ªüi t·∫°o xong v·ªõi s·ªë l·∫ßn th·ª≠ gi·ªõi h·∫°n
      int retryCount = 0;
      while (!authProvider.isInitialized && retryCount < 5) {
        debugPrint(
          '‚è≥ WAIT: ƒêang ƒë·ª£i AuthProvider kh·ªüi t·∫°o... (l·∫ßn $retryCount)',
        );
        await Future.delayed(Duration(milliseconds: 200));
        retryCount++;
        if (!mounted) {
          debugPrint(
            '‚ö†Ô∏è NOT_MOUNTED: ProfilePage kh√¥ng c√≤n mounted khi ƒë·ª£i AuthProvider',
          );
          return;
        }
      }

      if (!authProvider.isInitialized) {
        debugPrint('‚ö†Ô∏è TIMEOUT: AuthProvider kh√¥ng kh·ªüi t·∫°o sau nhi·ªÅu l·∫ßn th·ª≠');
        _hasInitialized = true;
        return;
      }

      debugPrint(
        'üîç AUTH_STATE: AuthProvider ƒë√£ kh·ªüi t·∫°o. ƒêƒÉng nh·∫≠p = ${authProvider.isAuthenticated}',
      );

      if (authProvider.isAuthenticated) {
        debugPrint('‚úÖ AUTH_OK: Ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p. ƒêang t·∫£i th√¥ng tin...');
        await _fetchUserProfile();
      } else {
        debugPrint('‚ö†Ô∏è AUTH_NO: Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p.');
      }
    } catch (e) {
      debugPrint('‚ùå INIT_ERROR: L·ªói khi kh·ªüi t·∫°o ProfilePage: $e');
    } finally {
      _hasInitialized = true;
      debugPrint('‚úÖ INIT_DONE: ProfilePage ƒë√£ ho√†n t·∫•t kh·ªüi t·∫°o');
    }
  }

  Future<void> _fetchUserProfile() async {
    debugPrint('üîÑ Starting to fetch user profile in ProfilePage');

    // Ki·ªÉm tra mounted tr∆∞·ªõc khi c·∫≠p nh·∫≠t state
    if (!mounted) return;

    setState(() {
      _isLoading = true;
    });

    try {
      final authProvider = Provider.of<AuthProvider>(context, listen: false);
      // S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c m·ªõi kh√¥ng l√†m thay ƒë·ªïi isLoading chung
      final result = await authProvider.fetchUserProfile();

      debugPrint('‚úÖ Fetch user profile completed with result: $result');

      // Ki·ªÉm tra mounted l·∫ßn n·ªØa
      if (!mounted) return;

      setState(() {
        _isLoading = false;
      });
    } catch (e) {
      if (!mounted) return;
      debugPrint('‚ùå L·ªói khi t·∫£i th√¥ng tin ng∆∞·ªùi d√πng: $e');
      setState(() {
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    super.build(context); // Quan tr·ªçng cho AutomaticKeepAliveClientMixin
    _buildCount++;
    debugPrint('üèóÔ∏è BUILD: ProfilePage ƒë∆∞·ª£c x√¢y d·ª±ng l·∫ßn th·ª© $_buildCount');
    return Scaffold(
      backgroundColor: Colors.grey[300],
      appBar: AppBar(
        backgroundColor: Colors.grey[300],
        centerTitle: true,
        automaticallyImplyLeading: false,
        title: Text(
          "Th√¥ng Tin C√° Nh√¢n",
          style: TextStyle(
            color: Colors.blue[900],
            fontWeight: FontWeight.bold,
          ),
        ),
        actions: [
          IconButton(
            icon: Icon(Icons.refresh, color: Colors.blue[900]),
            onPressed: () {
              debugPrint('üîÑ Refresh button pressed');
              _fetchUserProfile();
            },
          ),
        ],
      ),
      body:
          _isLoading
              ? Center(child: CircularProgressIndicator())
              : Consumer<AuthProvider>(
                builder: (context, authProvider, child) {
                  final user = authProvider.user;
                  if (user == null) {
                    debugPrint('‚ùå User is null in Consumer builder');
                    return Center(
                      child: Text(
                        "Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ng∆∞·ªùi d√πng",
                        style: TextStyle(color: Colors.red),
                      ),
                    );
                  }

                  debugPrint('‚úÖ Displaying user data for: ${user.fullname}');
                  return Padding(
                    padding: EdgeInsets.all(20),
                    child: Form(
                      key: _formKey,
                      child: Container(
                        color: Colors.grey[300],
                        child: SingleChildScrollView(
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              _buildReadOnlyField("T√™n ƒë·∫ßy ƒë·ªß", user.fullname),
                              _buildReadOnlyField("MSSV", user.studentId),
                              _buildReadOnlyField("Email", user.email),
                              _buildReadOnlyField(
                                "S·ªë ƒëi·ªán tho·∫°i",
                                user.phoneNumber,
                              ),
                              _buildReadOnlyField("ƒê·ªãa ch·ªâ", user.address),
                              if (user.department != null)
                                _buildReadOnlyField("Khoa", user.department!),
                              if (user.clazz != null)
                                _buildReadOnlyField("L·ªõp", user.clazz!),
                              if (user.dateOfBirth != null)
                                _buildReadOnlyField(
                                  "Ng√†y sinh",
                                  "${user.dateOfBirth!.day}/${user.dateOfBirth!.month}/${user.dateOfBirth!.year}",
                                ),
                              SizedBox(height: 20),
                              Center(
                                child: ElevatedButton(
                                  onPressed: () {
                                    if (_formKey.currentState!.validate()) {
                                      // X·ª≠ l√Ω x√°c nh·∫≠n form
                                      debugPrint(
                                        '‚úÖ Form validated successfully',
                                      );
                                    }
                                  },
                                  style: ElevatedButton.styleFrom(
                                    backgroundColor: Colors.blue[900],
                                    padding: EdgeInsets.symmetric(
                                      horizontal: 30,
                                      vertical: 12,
                                    ),
                                    shape: RoundedRectangleBorder(
                                      borderRadius: BorderRadius.circular(10),
                                    ),
                                  ),
                                  child: Text(
                                    "X√°c nh·∫≠n",
                                    style: TextStyle(
                                      fontSize: 16,
                                      color: Colors.white,
                                    ),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                    ),
                  );
                },
              ),
    );
  }

  // H√†m t·∫°o TextField ch·ªâ ƒë·ªçc
  Widget _buildReadOnlyField(String label, String value) {
    // Debug cho m·ªói field
    debugPrint('üìù Building field: $label = $value');
    return Padding(
      padding: EdgeInsets.only(bottom: 15),
      child: TextFormField(
        initialValue: value,
        readOnly: true,
        decoration: InputDecoration(
          labelText: label,
          border: OutlineInputBorder(),
          filled: true,
          fillColor: Colors.white,
        ),
      ),
    );
  }
}
